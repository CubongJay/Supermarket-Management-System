@page "/editcategory/{categoryId}"

@inject UseCases.UseCaseInterfaces.IEditCategoryUseCase EditCategoryUseCase
@inject UseCases.UseCaseInterfaces.IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject NavigationManager NavigationManager
<h3>Edit Category</h3>
<EditForm Model="category" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label for="name">Name</label>
        <input type="text" id="Name" @bind-value="category.Name" class="form-control" />
    </div>
    <div class="form-group">
        <label for="description">Description</label>
        <input type="text" id="Description" @bind-value="category.Description" class="form-control" />
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-primary"@onclick="OnCancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public string CategoryId { get; set; }     
    public Category category;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        category = new Category();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(int.TryParse(this.CategoryId, out int iCategoryId))
        {
            var cat = GetCategoryByIdUseCase.Execute(iCategoryId);
            this.category = new Category { CategoryId = cat.CategoryId, Name = cat.Name, Description = cat.Description };
        }
    }

    public void OnValidSubmit()
    {
        EditCategoryUseCase.Execute(this.category);
        NavigationManager.NavigateTo("/categories");
    }

    public void OnCancel()
    {
        NavigationManager.NavigateTo("/categories");
    }

}
